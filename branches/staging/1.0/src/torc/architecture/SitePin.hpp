// Torc - Copyright 2011 University of Southern California.  All Rights Reserved.
// $HeadURL$
// $Id$

// This program is free software: you can redistribute it and/or modify it under the terms of the 
// GNU General Public License as published by the Free Software Foundation, either version 3 of the 
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See 
// the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program.  If 
// not, see <http://www.gnu.org/licenses/>.

/// \file
/// \brief Header for the SitePin class.

#ifndef TORC_ARCHITECTURE_SITEPIN_HPP
#define TORC_ARCHITECTURE_SITEPIN_HPP

#include "torc/architecture/XilinxDatabaseTypes.hpp"

namespace torc {
namespace architecture {

	/// \bried Encapsulation of pin directionality.
	/// \detail These directions are generated by the database build code, and are used by the 
	///		SitePin and PrimitivePin clases.
	class PinDirection {
	public:
	// enumerations
		enum EPinDirection { ePinDirectionNone = 0, ePinDirectionInput = 2, 
			ePinDirectionOutput = 4 };
	};

	/// \brief Site type and population data for the family and the device.
	/// \details Each device has a collection of logic sites.  Those sites are instantiations of 
	///		family defined site types, with each instance also including a mapping from site pin 
	///		to Tilewire.


	/// \brief Encapsulation of a site pin's name and flags.
	class SitePin : public PinDirection {
		friend class Sites;
		std::string mName;
		PinFlags mFlags;
		SitePin(const std::string& inName, PinFlags inFlags) : mName(inName), mFlags(inFlags) {}
	public:
		const std::string& getName(void) const { return mName; }
		PinFlags getFlags(void) const { return mFlags; }
		SitePin(void) : mName(), mFlags() {};
		bool isInput(void) const { return (mFlags & ePinDirectionInput) != 0; }
		bool isOutput(void) const { return (mFlags & ePinDirectionOutput) != 0; }
	};

} // namespace architecture
} // namespace torc

#endif // TORC_ARCHITECTURE_SITEPIN_HPP
