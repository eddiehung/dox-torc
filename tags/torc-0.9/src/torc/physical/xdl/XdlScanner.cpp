#line 2 "XdlScanner.cpp"

#line 4 "XdlScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer XdlFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *Xdlalloc (yy_size_t  );
void *Xdlrealloc (void *,yy_size_t  );
void Xdlfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 45
#define YY_END_OF_BUFFER 46
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[232] =
    {   0,
       40,   40,   46,   44,   45,   43,   44,   45,   42,   45,
       44,   45,   37,   44,   45,   36,   44,   45,   44,   45,
       44,   45,   32,   44,   45,   32,   44,   45,   32,   44,
       45,   32,   44,   45,   32,   44,   45,   32,   44,   45,
       32,   44,   45,   32,   44,   45,   32,   44,   45,   32,
       44,   45,   32,   44,   45,   32,   44,   45,   32,   44,
       45,   33,   44,   45,   34,   44,   45,   16,   45,   13,
       45,   14,   45,   45,   12,   45,   15,   45,   17,   45,
       19,   45,   20,   45,   45,   18,   45,   17,   45,   40,
       45,   39,   45,   45,   41,   45,   45,   43,   42,   36,

       36,   30,    4,    3,    1,    2,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   16,   13,   14,   17,   17,   19,
       18,   20,   17,   17,   40,   39,   38,   36,   32,   32,
       32,   32,   26,   32,   32,   32,   32,   32,   10,   32,
       32,   29,   32,   32,   32,   32,   32,   32,   32,   25,
       32,   36,   32,   32,   32,   32,   32,    9,   32,   32,
       32,   32,    8,   32,   32,   32,   32,   31,   32,   36,
       32,   11,   32,   32,   32,   27,   32,   32,   32,   32,
       32,   32,   32,   36,   23,   32,    5,   32,   32,   32,

        6,   32,   28,   32,   21,   32,   32,   32,   36,   32,
       32,   32,   32,   36,   32,    9,   32,   24,   32,   22,
       32,   36,    7,   32,   36,   36,   36,   36,   36,   35,
       36
    } ;

static yyconst flex_int16_t yy_accept[170] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        6,    9,   11,   13,   16,   19,   21,   23,   26,   29,
       32,   35,   38,   41,   44,   47,   50,   53,   56,   59,
       62,   65,   68,   70,   72,   74,   75,   77,   79,   81,
       83,   85,   86,   88,   90,   92,   94,   95,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  145,  146,  147,  148,

      149,  151,  152,  154,  155,  156,  157,  158,  159,  160,
      162,  163,  164,  164,  165,  166,  167,  168,  170,  171,
      172,  173,  175,  176,  177,  178,  180,  181,  182,  183,
      184,  185,  186,  188,  189,  190,  191,  192,  193,  194,
      195,  197,  199,  200,  201,  203,  205,  207,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  218,  220,  222,
      223,  225,  226,  227,  228,  229,  230,  232,  232
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    8,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
       11,   12,    1,    1,   13,   13,   13,   13,   14,   13,
       15,   16,   13,   13,   13,   13,   13,   13,   17,   13,
       13,   18,   13,   19,   20,   13,   13,   13,   13,   13,
        1,   21,    1,    1,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   13,   30,   13,   13,   31,   32,   33,
       34,   35,   13,   36,   37,   38,   39,   40,   41,   13,
       13,   13,   42,    1,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    2,    3,    4,    4,    1,    1,    5,    5,    6,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1
    } ;

static yyconst flex_int16_t yy_base[179] =
    {   0,
        0,    0,   42,   46,   55,   59,   50,   62,  277,  278,
      274,  278,  272,  278,  272,   60,   63,    0,  239,  244,
      244,  237,   45,  236,  234,  240,  227,   54,  232,   64,
      278,  278,    0,  262,  278,  260,  278,  278,  241,   89,
       93,   97,  278,  101,    0,  278,  258,  278,    0,  258,
      278,    0,   85,  250,  278,  278,  278,  278,    0,  225,
      228,  219,  229,  228,  219,   42,  226,  213,  212,  214,
      225,   68,   84,  102,  222,  220,    0,  243,  278,  223,
      110,  121,  125,  278,  130,  222,  116,    0,  278,  278,
      224,  215,  238,  209,  206,    0,  198,  206,  197,  195,

        0,  198,    0,  207,  193,  203,  195,  197,  218,    0,
      209,  198,  111,  195,  189,  189,  188,  197,  188,  188,
      190,    0,  180,  182,  191,  204,  192,  185,  278,  177,
      183,  182,    0,  174,  179,  172,  178,  177,  177,  182,
        0,    0,  161,  170,    0,    0,    0,  163,  162,  168,
      145,  148,  148,  145,  150,  141,    0,    0,    0,  151,
        0,  143,  119,   97,   71,   66,    0,  278,  137,  144,
      151,  158,   63,  165,  172,  179,  186,  192
    } ;

static yyconst flex_int16_t yy_def[179] =
    {   0,
      168,    1,  169,  169,  170,  170,  171,  171,  168,  168,
      168,  168,  168,  168,  172,  168,  168,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      168,  168,  174,  168,  168,  168,  168,  168,  175,  168,
      168,  168,  168,  176,  177,  168,  168,  168,  178,  168,
      168,  172,  172,  168,  168,  168,  168,  168,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  174,  168,  168,  175,
      176,  168,  168,  168,  168,  175,  176,  177,  168,  168,
      172,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      172,  173,  168,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  172,  173,  168,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  172,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  172,
      173,  173,  173,  173,  172,  173,  173,  173,  173,  172,
      173,  172,  172,  172,  172,  172,  172,    0,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168
    } ;

static yyconst flex_int16_t yy_nxt[322] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   10,   10,   10,
       17,   10,   18,   18,   18,   18,   18,   18,   18,   18,
       10,   10,   18,   19,   20,   21,   22,   18,   23,   24,
       18,   25,   26,   27,   28,   18,   18,   18,   29,   30,
       18,   31,   32,   34,   35,   36,   37,   34,   35,   36,
       37,   38,   46,   47,   48,   38,   40,   41,   42,   43,
       40,   41,   42,   43,   46,   47,   48,   59,   54,   56,
       49,   55,   74,   57,   58,   44,   98,   64,   99,   44,
       65,  167,   49,   70,   71,  166,   53,   72,   75,   76,
       82,   83,   83,   84,   83,   83,   83,   84,   83,   85,

       83,   84,   80,  105,   80,   80,   91,  107,  106,  109,
       74,   80,  113,   80,   80,  129,  165,   80,  108,   80,
       80,   87,   82,   83,   83,   84,   83,   83,   83,   84,
       87,   83,   83,   83,   84,  164,   87,   33,   33,   33,
       33,   33,   33,   33,   39,   39,   39,   39,   39,   39,
       39,   45,   45,   45,   45,   45,   45,   45,   52,   52,
      163,   52,   52,   52,   52,   77,  162,  161,  160,   77,
      159,   77,   80,  158,  157,  156,   80,   80,   80,   86,
       86,  155,   86,   86,   86,   86,   88,   88,  154,  153,
       88,   88,   90,   90,  152,   90,   90,   90,   90,  151,

      150,  149,  148,  147,  146,  145,  144,   96,  143,  142,
      141,  140,  126,  139,  138,  110,  137,  136,  135,  134,
      133,  132,  131,  130,  128,  127,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  114,  113,
      112,  111,   81,   81,   78,  110,  110,  104,  103,  102,
      101,  100,   97,   96,   95,   94,   93,   92,   54,   50,
       89,   81,   79,   78,   73,   69,   68,   67,   66,   63,
       62,   61,   60,   53,   51,   50,  168,    9,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168
    } ;

static yyconst flex_int16_t yy_chk[322] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    4,    4,    4,
        4,    3,    7,    7,    7,    4,    5,    5,    5,    5,
        6,    6,    6,    6,    8,    8,    8,  173,   16,   17,
        7,   16,   30,   17,   17,    5,   66,   23,   66,    6,
       23,  166,    8,   28,   28,  165,   53,   28,   30,   30,
       40,   40,   40,   40,   41,   41,   41,   41,   42,   42,

       42,   42,   44,   72,   44,   44,   53,   73,   72,   74,
       74,   81,  113,   81,   81,  113,  164,   87,   73,   87,
       87,   44,   82,   82,   82,   82,   83,   83,   83,   83,
       81,   85,   85,   85,   85,  163,   87,  169,  169,  169,
      169,  169,  169,  169,  170,  170,  170,  170,  170,  170,
      170,  171,  171,  171,  171,  171,  171,  171,  172,  172,
      162,  172,  172,  172,  172,  174,  160,  156,  155,  174,
      154,  174,  175,  153,  152,  151,  175,  175,  175,  176,
      176,  150,  176,  176,  176,  176,  177,  177,  149,  148,
      177,  177,  178,  178,  144,  178,  178,  178,  178,  143,

      140,  139,  138,  137,  136,  135,  134,  132,  131,  130,
      128,  127,  126,  125,  124,  123,  121,  120,  119,  118,
      117,  116,  115,  114,  112,  111,  109,  108,  107,  106,
      105,  104,  102,  100,   99,   98,   97,   95,   94,   93,
       92,   91,   86,   80,   78,   76,   75,   71,   70,   69,
       68,   67,   65,   64,   63,   62,   61,   60,   54,   50,
       47,   39,   36,   34,   29,   27,   26,   25,   24,   22,
       21,   20,   19,   15,   13,   11,    9,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168
    } ;

#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.ll"
/*
// Torc - Copyright 2011 University of Southern California.  All Rights Reserved.
// $HeadURL$
// $Id$

// This program is free software: you can redistribute it and/or modify it under the terms of the 
// GNU General Public License as published by the Free Software Foundation, either version 3 of the 
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See 
// the GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along with this program.  If 
// not, see <http://www.gnu.org/licenses/>.
*/
#line 20 "scanner.ll"


// ------------------------------------------------------------------------------------------------
// -------------------------------------- C/C++ declarations --------------------------------------
// ------------------------------------------------------------------------------------------------


// disable GCC warnings that Bison gives us little control over
//#pragma GCC diagnostic ignored "-Wshorten-64-to-32"
//#pragma GCC diagnostic ignored "-Werror"
//#pragma GCC diagnostic ignored "-Wall"

#include <string>
#include "torc/physical/xdl/XdlScanner.hpp"

namespace torc { namespace physical {} }
using namespace torc::physical;

/// \brief Import the parser's token types into a local typedef
typedef torc::XdlParser::token token;
typedef torc::XdlParser::token_type token_type;

/// \details By default, yylex() returns int, but we want token_type instead.  Unfortunately, 
///		yyterminate returns 0 by default, which is not of token_type.
#define yyterminate() return token::END

/// \brief Disable the inclusion of unistd.h, which is not available under Visual C++ on Win32.
/// \details The C++ scanner uses STL streams instead.
#define YY_NO_UNISTD_H

//#define DEBUG(a) printf a
#define DEBUG(a)
#define DEBUG1(a) printf a


/* ---------------------------------------------------------------------------------------------- */
/* -------------------------------- Flex declarations and options ------------------------------- */
/* ---------------------------------------------------------------------------------------------- */
/** \brief Enable C++ generation for the scanner class. **/
/** \brief Change the name of the scanner class to "XdlFlexLexer". **/
/** \brief The manual says batch is "somewhat more optimized". **/
/** \brief Enable debug output from the scanner. **/
/*%option debug*/
/** \brief We anticipate no included XDL files. **/
/** \brief Enable the use of start condition stacks. **/
/** \brief Track location information.  Each time yylex is invoked, begin is moved to end. **/
#line 83 "scanner.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/** \brief Special lexing state for config strings. **/

/** \brief Special second lexing state for config strings. **/

/** \brief Special lexing state for double-quoted strings. **/

#line 635 "XdlScanner.cpp"

#define INITIAL 0
#define CONFIGSTRING 1
#define CONFIGSTRING2 2
#define DOUBLEQUOTE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 94 "scanner.ll"



 /* ---------------------------------------------------------------------------------------------- */
 /* --------------------------------- scanner regular expressions -------------------------------- */
 /* ---------------------------------------------------------------------------------------------- */


 /** \brief Code belonging at the beginning of yylex(). **/

    yylloc->step();



 /* ---------------------------------------------------------------------------------------------- */
 /* ------------------------------------ Begin XDL lexer rules ----------------------------------- */
 /* ---------------------------------------------------------------------------------------------- */


						// Symbol Description
						// ====== ==========================================
						//   ==   Bidirectional, unbuffered
						//   =>   Bidirectional, buffered in one direction
						//   =-   Bidirectional, buffered in both directions
						//   ->   Directional, buffered
#line 764 "XdlScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)Xdlalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 169 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 168 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 119 "scanner.ll"
{ return token::BIDIRUNBUF; }	// == Bidirectional, unbuffered
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 120 "scanner.ll"
{ return token::BIDIRUNIBUF; }	// => Bidirectional, buffered in one direction
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "scanner.ll"
{ return token::BIDIRBIBUF; }	// =- Bidirectional, buffered in both directions
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 122 "scanner.ll"
{ return token::UNIDIRBUF; }	// -> Directional, buffered
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "scanner.ll"
{ return token::DESIGN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 125 "scanner.ll"
{ return token::MODULE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 126 "scanner.ll"
{ return token::ENDMODULE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 127 "scanner.ll"
{ return token::PORT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 128 "scanner.ll"
{ return token::INST; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 129 "scanner.ll"
{ return token::NET; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 131 "scanner.ll"
{ BEGIN CONFIGSTRING; colon = 0; yyless(yyleng-1); return token::CFG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 132 "scanner.ll"
{ return static_cast<token_type>('"'); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 133 "scanner.ll"
{ /* discard whitespace */ }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 134 "scanner.ll"
{ yylloc->lines(); /* discard whitespace */ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "scanner.ll"
{ 
;						  colon++; if(colon == 2) BEGIN CONFIGSTRING2; 
;						  return static_cast<token_type>(':'); 
;						}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 139 "scanner.ll"
{ 
;						  *yylval = yytext; return colon == 0 ? token::CFGSETTING : token::CFGNAME; 
;						}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 142 "scanner.ll"
{ *yylval = yytext; return token::CFGVALUE; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 143 "scanner.ll"
{ 
;						  /* account for newlines embedded within trailing whitespace */
;						  for(char* ptr = yytext; *ptr != 0; ptr++) { 
;							if(*ptr == 0) break; 
;							if(false && *ptr == '\n') yylloc->lines();
;						  } 
;						  colon = 0; BEGIN INITIAL; return static_cast<token_type>('"'); 
;						}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 151 "scanner.ll"
{ colon = 0; BEGIN CONFIGSTRING; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 152 "scanner.ll"
{ yylloc->lines(); /* discard whitespace */ }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 154 "scanner.ll"
{ return token::PLACED; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 155 "scanner.ll"
{ return token::UNPLACED; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 156 "scanner.ll"
{ return token::BONDED; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 157 "scanner.ll"
{ return token::UNBONDED; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 158 "scanner.ll"
{ return token::POWER; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 159 "scanner.ll"
{ return token::GROUND; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 160 "scanner.ll"
{ return token::INPIN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 161 "scanner.ll"
{ return token::OUTPIN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 162 "scanner.ll"
{ return token::PIP; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 163 "scanner.ll"
{ *yylval = yytext; return token::SPEEDGRADE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 164 "scanner.ll"
{ *yylval = yytext; return token::XDLVERSION; 
							/** \todo Need to avoid obscuring IDENTIFIER. */ }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 166 "scanner.ll"
{ *yylval = yytext; return token::IDENTIFIER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 167 "scanner.ll"
{ return token::OBRACE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 168 "scanner.ll"
{ return token::EBRACE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 170 "scanner.ll"
{ 
;						  DEBUG(("ROUTETHROUGH "));
;						  // be sure to strip the leading hash and spaces from the token
;						  char* ptr = yytext + 1;
;						  char* end = ptr + yyleng;
;						  while(*ptr == ' ' && ptr < end) ptr++;
;						  *yylval = ptr;
;						  return token::ROUTETHROUGH;
;						}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 179 "scanner.ll"
{ // we have to be careful not to let _ROUTETHROUGH expressions pass for comments
;						  char* ptr = yytext + 1;
;						  char* end = ptr + yyleng;
;						  while((*ptr == ' ' || *ptr == '\t') && ptr < end) ptr++;
;						  if((end - ptr > 13) && strncmp(ptr, "_ROUTETHROUGH", 13) == 0) REJECT;
;						  // okay, this really is a comment
;						  DEBUG(("COMMENT "));
;						}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 188 "scanner.ll"
{ BEGIN DOUBLEQUOTE; in_double_quote = true; last_string = ""; return static_cast<token_type>(yytext[0]); /* enter exclusive quoted string state */ }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 189 "scanner.ll"
{ last_string += yytext; return token::STRING; /* append escaped characters to the input */ }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 190 "scanner.ll"
{ yylloc->lines(); /* ignore unescaped line breaks */ }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 191 "scanner.ll"
{ last_string += yytext; return token::STRING; /* append characters other than \, ", \n, \r */ }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 192 "scanner.ll"
{ if(!in_double_quote) {
;							BEGIN INITIAL; /* exit the exclusive quoted string state */
;							DEBUG(("\" "));
;							return static_cast<token_type>('"');
;						  }
;						  in_double_quote = false; /* we're no longer in double-quote mode */
;						  yylloc->end.columns(-1); yyless(yyleng-1); /* push back the trailing double quote */
;						  //DEBUG(("[%s: length %d]\n", last_string.c_str(), last_string.length()));
;						  return token::STRING; /* and return the STRING token */
;						}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 203 "scanner.ll"
{ yylloc->lines(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 204 "scanner.ll"
{ }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 205 "scanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
/* ---------------------------------------------------------------------------------------------- */
/* ------------------------------------- End XDL lexer rules ------------------------------------ */
/* ---------------------------------------------------------------------------------------------- */
case 45:
YY_RULE_SETUP
#line 214 "scanner.ll"
ECHO;
	YY_BREAK
#line 1126 "XdlScanner.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CONFIGSTRING):
			case YY_STATE_EOF(CONFIGSTRING2):
			case YY_STATE_EOF(DOUBLEQUOTE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Xdlfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Xdlfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Xdlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 169 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 169 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 168);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Xdlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Xdlalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Xdlfree((void *) b->yy_ch_buf  );

	Xdlfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Xdlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Xdlrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Xdlalloc(new_size  );

		else
			(yy_start_stack) = (int *) Xdlrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Xdlalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Xdlrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Xdlfree (void * ptr )
{
	free( (char *) ptr );	/* see Xdlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 214 "scanner.ll"




// ------------------------------------------------------------------------------------------------
// ---------------------------------------- Additional code ---------------------------------------
// ------------------------------------------------------------------------------------------------


namespace torc {

	XdlScanner::XdlScanner(std::istream* in, std::ostream* out) : XdlFlexLexer(in, out) {}

	XdlScanner::~XdlScanner() {}

	void XdlScanner::set_debug(bool b) {
		yy_flex_debug = b;
	}

} // namespace torc


/// \details This implementation of XdlFlexLexer::yylex() is necessary to fill the vtable of class 
///		XdlFlexLexer.  We define the scanner's main yylex() function via YY_DECL to reside in class 
///		XdlScanner instead.
#ifdef yylex
#undef yylex
#endif

int XdlFlexLexer::yylex() {
    std::cerr << "in XdlFlexLexer::yylex() !" << std::endl;
    return 0;
}

/// \details When the scanner receives an End-Of-File result from YY_INPUT, it checks yywrap() for 
///		permission to proceed.  If yywrap() returns false (zero), we assume that the function has 
///		set up yyin to point to the next input file, and the scanning continues.  If yywrap() 
///		instead returns true (non-zero), the scanner terminates and returns 0 to the caller.
int XdlFlexLexer::yywrap() {
    return 1;
}

//namespace {
//	/// \brief Suppress GCC warnings about unused boost global variables.
//	void suppress_boost_gcc_warnings(void);
//	void suppress_boost_gcc_warnings(void) {
//		(void) boost::system::system_category;
//		(void) boost::system::generic_category;
//		(void) boost::system::posix_category;
//		(void) boost::system::errno_ecat;
//		(void) boost::system::native_ecat;
//	}
//}

